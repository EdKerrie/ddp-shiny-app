install.packages("shiny")
shiny::runApp()
shiny::runApp()
library(manipulate)
manoulate(plot(1:x), x=slider(1,100))
manipulate(plot(1:x), x=slider(1,100))
require(rcharts)
require(devtools)
install_github('rCharts', 'ramnathv')
install.packages("devtools")
require(devtools)
install_github('rCharts', 'ramnathv')
getwd()
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
library(rChart)
library(rCharts)
hair_eye = as.data.frame(HairEyeColor)
rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
hair_eye = as.data.frame(HairEyeColor)
n1 <- rPlot(Freq ~ Hair | Eye, color = 'Eye', data = hair_eye, type = 'bar')
names(iris) = gsub("\\.", "", names(iris))
n1 <- rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
n1
install.packages("googleVis")
library(googleVis)
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=600, height=400))
print(M, "chart")
?gvisGeoChart
G <- gvisGeoChart(Exports, locationvar="country", colorvar="Profit", options=list(width=600, height=400))
G <- gvisGeoChart(Exports, locationvar="Country", colorvar="Profit", options=list(width=600, height=400))
G
print(G, "chart")
plot(G)
G <- gvisGeoChart(Exports, locationvar="Country", colorvar="Profit", options=list(width=600, height=400, region="150"))
plot(G)
G <- gvisGeoChart(Exports, locationvar="Country", colorvar="Profit", options=list(width=600, height=400, region="NL"))
plot(G)
G <- gvisGeoChart(Exports, locationvar="Country", colorvar="Profit", options=list(width=600, height=400, region="NL", resolution="provinces"))
plot(G)
G <- gvisGeoChart(Exports, locationvar="Country", colorvar="Profit", options=list(width=600, height=400, region="NL", resolution="regions"))
plot(G)
G <- gvisGeoChart(Exports, locationvar="Country", colorvar="Profit", options=list(width=600, height=400, region="NL", resolution="provinces"))
G <- gvisGeoChart(Exports, "Country", "Profit", options=list(width=200, height=100))
T1 <- gvisTable(Exports, options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerg(G, T1, horizontal=FALSE)
GTM <- gvisMerg(GT, M, horizontal=TRUE, tableOptions="bgcolor=\"#CCCCC\" cellspacing=10")
G <- gvisGeoChart(Exports, "Country", "Profit", options=list(width=200, height=100))
T1 <- gvisTable(Exports, options=list(width=200, height=270))
M <- gvisMotionChart(Fruits, "Fruit", "Year", options=list(width=400, height=370))
GT <- gvisMerge(G, T1, horizontal=FALSE)
GTM <- gvisMerge(GT, M, horizontal=TRUE, tableOptions="bgcolor=\"#CCCCC\" cellspacing=10")
plot(GTM)
install_github("ropensci/plotly")
library(devtools)
install_github("ropensci/plotly")
library(plotly)
Sys.setenv("plotly_username"="jessevandenberg")
Sys.setenv("plotly_api_key"="1nrwewnx0v")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
myplot
plot(myPlot())
manipulate(myPlot, s = slider(0, 2, step = 0.1))
plot(myPlot())
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data("airquality")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
shiny::runApp()
a <- 2
a <- data.frame(c(2,3)
)
View(a)
head(a)
str(a)
summary(a)
library(devetools)
library(devtools)
install.github("slidify", "ramnathv")
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
getwd()
setwd("~/Coursera/Developing Data Products/Shiny webapp")
author("first_deck")
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(googleVis)
library(shiny)
getwd()
?read.table
library(dplyr)
library(dplyr)
sunshine <- tbl_df(read.table("/Data/KNMI_20160125.txt", sep=",", skip=40))
sunshine <- tbl_df(read.table("\Data\KNMI_20160125.txt", sep=",", skip=40))
getwd()
sunshine <- tbl_df(read.table("/Data/KNMI_20160125.txt", sep=",", skip=40))
sunshine <- tbl_df(read.table("Data/KNMI_20160125.txt", sep=",", skip=40))
sunshine
sunshine <- tbl_df(read.table("Data/KNMI_20160125.txt", sep=",", skip=38))
sunshine
sunshine <- tbl_df(read.table("Data/KNMI_20160125.txt", sep=",", skip=30))
sunshine
sunshine <- tbl_df(read.table("Data/KNMI_20160125.txt", sep=","))
sunshine
sun.col.names <- c("Station", "Date", "Sunhours")
data.names <- c("Station", "Date", "Sunhours")
remove(sun.col.names)
sunshine <- tbl_df(read.table("Data/KNMI_20160125.txt", sep=",", col.names=data.names))
sunshine
# Initialize libraries
library(googleVis)
library(shiny)
library(dplyr)
# Load data set
sunshine.data.names <- c("Station", "Date", "Sunhours")
stations.data.names <- c("Station", "Lon.east", "Lat.north", "Alt.m", "Name")
sunshine <- tbl_df(read.table("Data/KNMI_20160125.txt", sep=",", col.names=sunshine.data.names))
stations <- tbl_df(read.table("Data/Weerstations.txt", header=TRUE, sep="", col.names=stations.data.names))
# remove NA's
sunshine <- na.omit(sunshine)
stations <- na.omit(stations)
# Convert to the appropriate variable types
sunshine$Date <- as.character(sunshine$Date)
sunshine$Date <- as.Date(sunshine$Date, format="%Y%m%d")
stations$Station <- gsub(":", "", paste(stations$Station))
stations$Name <- as.character(stations$Name)
# Combine long and lat
stations$LatLon <- paste(stations$Lat.north, stations$Lon.east, sep=":")
stations$Lon.east <- NULL
stations$Lat.north <- NULL
# Merge dataframes, add the station data to the sunshine set
sunshine <- tbl_df(merge(sunshine, stations))
aggregate(sunshine, by="Date", FUN="mean")
aggregate(sunshine, by="sunshine$Date", FUN="mean")
aggregate(sunshine, by=list(sunshine$Date), FUN=mean)
aggSun <- aggregate(sunshine, by=list(sunshine$Date), FUN=mean)
library(lubridate)
# Load data set
sunshine.data.names <- c("Station", "Date", "Sunhours")
stations.data.names <- c("Station", "Lon.east", "Lat.north", "Alt.m", "Name")
sunshine <- tbl_df(read.table("Data/KNMI_20160125.txt", sep=",", col.names=sunshine.data.names))
stations <- tbl_df(read.table("Data/Weerstations.txt", header=TRUE, sep="", col.names=stations.data.names))
# remove NA's
sunshine <- na.omit(sunshine)
stations <- na.omit(stations)
# Convert to the appropriate variable types
sunshine$Date <- as.character(sunshine$Date)
sunshine$Date <- as.Date(sunshine$Date, format="%Y%m%d")
sunshine$Date <- year(sunshine$Date)
sunshine
stations$Station <- gsub(":", "", paste(stations$Station))
stations$Name <- as.character(stations$Name)
# Combine long and lat
stations$LatLon <- paste(stations$Lat.north, stations$Lon.east, sep=":")
stations$Lon.east <- NULL
stations$Lat.north <- NULL
aggSun <- aggregate(sunshine, by=list(sunshine$Date), FUN=mean)
View(aggSun)
aggSun <- aggregate(sunshine, by=list(Station, Date), FUN=mean)
aggSun <- aggregate(sunshine, by=list(sunshine$Station, sunshine$Date), FUN=mean)
View(aggSun)
?aggregate
aggSun
aggSun <- tbl_df(aggregate(sunshine, by=list(sunshine$Station, sunshine$Date), FUN=mean))
aggSun
View(aggSun)
aggSun$Group.1 <- NULL
aggSun$Group.2 <- NULL
aggSun <- tbl_df(merge(aggSun, stations))
aggSun
gvisGeoChart(aggSun, locationvar="LatLon", colorvar="Sunhours", sizevar="Sunhours")
gg <- gvisGeoChart(aggSun, locationvar="LatLon", colorvar="Sunhours", sizevar="Sunhours")
print(gg)
plot(gg)
?gvisGeoChart
gg <- gvisGeoChart(aggSun, locationvar="LatLon",
colorvar="Sunhours", sizevar="Sunhours",
options=list(region="150"))
plot(gg)
gg <- gvisGeoChart(aggSun, locationvar="LatLon",
colorvar="Sunhours", sizevar="Sunhours",
options=list(country="Netherlands"))
plot(gg)
gg <- gvisGeoChart(aggSun, locationvar="LatLon",
colorvar="Sunhours", sizevar="Sunhours",
options=list(region="528"))
plot(gg)
gg <- gvisGeoChart(aggSun, locationvar="LatLon",
colorvar="Sunhours", sizevar="Sunhours",
options=list(country="528"))
plot(gg)
gg <- gvisGeoChart(aggSun, locationvar="LatLon",
colorvar="Sunhours", sizevar="Sunhours",
options=list(region="155"))
plot(gg)
gg <- gvisGeoChart(aggSun, locationvar="LatLon",
colorvar="Sunhours", sizevar="Sunhours",
options=list(region="155"))
plot(gg)
gg <- gvisGeoChart(aggSun, locationvar="LatLon",
colorvar="Sunhours", sizevar="Sunhours",
options=list(region="NL"))
plot(gg)
gg <- gvisGeoChart(aggSun, locationvar="LatLon",
colorvar="Sunhours",
options=list(region="NL"))
plot(gg)
gg <- gvisGeoChart(aggSun, locationvar="LatLon",
colorvar="Sunhours",
options=list(region="NL", displayMode="regions",
resolution="provinces"))
plot(gg)
gg <- gvisGeoChart(aggSun, locationvar="province.name",
colorvar="Sunhours",
options=list(region="NL", displayMode="regions",
resolution="provinces"))
## Plot world wide earth quakes of the last 30 days with magnitude >= 4.0
library(XML)
## Get earthquake data of the last 30 days
eq <- read.csv("http://earthquake.usgs.gov/earthquakes/feed/v0.1/summary/2.5_week.csv")
eq$loc=paste(eq$Latitude, eq$Longitude, sep=":")
G9 <- gvisGeoChart(eq, "loc", "Depth", "Magnitude",
options=list(displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="EQ")
plot(G9)
install.packages(XML)
install.packages("XML")
## Plot world wide earth quakes of the last 30 days with magnitude >= 4.0
library(XML)
## Get earthquake data of the last 30 days
eq <- read.csv("http://earthquake.usgs.gov/earthquakes/feed/v0.1/summary/2.5_week.csv")
eq$loc=paste(eq$Latitude, eq$Longitude, sep=":")
G9 <- gvisGeoChart(eq, "loc", "Depth", "Magnitude",
options=list(displayMode="Markers",
colorAxis="{colors:['purple', 'red', 'orange', 'grey']}",
backgroundColor="lightblue"), chartid="EQ")
plot(G9)
require(stats)
data(quakes)
head(quakes)
quakes$latlong<-paste(quakes$lat, quakes$long, sep=":")
G7 <- gvisGeoChart(quakes, "latlong", "depth", "mag",
options=list(displayMode="Markers", region="009",
colorAxis="{colors:['red', 'grey']}",
backgroundColor="lightblue"))
plot(G7)
gg <- gvisMotionChart(aggSun, idvar=Station, timevar=Date)
View(aggSun)
gg <- aggSun %>% gvisMotionChart(idvar=Station, timevar=Date)
gg <- aggSun %>% gvisMotionChart(idvar="Station", timevar="Date")
plot(gg)
plot(gg)
?gvisMotionChart
plot(gg)
shiny::runApp()
shiny::runApp()
electricity <- tbl_df(read.csv("Data/nrg_pc_204_1_Data.csv", header=TRUE))
electricity
electricity <- tbl_df(read.csv("Data/nrg_pc_204_1_Data.csv", header=TRUE, skip=44))
electricity
electricity <- tbl_df(read.csv("Data/nrg_pc_204_1_Data.csv", header=TRUE, skip=45))
electricity
electricity <- tbl_df(read.csv("Data/nrg_pc_204_1_Data.csv", header=TRUE, skip=2-45))
electricity
?read.csv
electricity <- tbl_df(read.csv("Data/nrg_pc_204_1_Data.csv", header=TRUE, skip=45))
electricity
electricity.colnames <- c("Date", "Country", "Product", "Consom", "Unit", "Tax", "Currency", "Value")
electricity <- tbl_df(read.csv("Data/nrg_pc_204_1_Data.csv", header=TRUE, skip=45, col.names=electricity.colnames))
electricity
electricity <- electricity[1,2,8]
electricity
electricity <- tbl_df(read.csv("Data/nrg_pc_204_1_Data.csv", header=TRUE, skip=45, col.names=electricity.colnames))
electricity <- electricity[1|2|8]
electricity <- electricity[1&2&8]
electricity <- electricity[c(1,2,8),]
electricity <- tbl_df(read.csv("Data/nrg_pc_204_1_Data.csv", header=TRUE, skip=45, col.names=electricity.colnames))
electricity <- electricity[,c(1,2,8)]
electricity
gas.colnames <- c("Date", "Country", "Product", "Consom", "Unit", "Tax", "Currency", "Value")
gas <- tbl_df(read.csv("Data/nrg_pc_202_1_Data.csv", header=TRUE, skip=45, col.names=gas.colnames))
gas <- gas[,c(1,2,8)]
gas
electricity.colnames <- c("Date", "Country", "Product", "Consom", "Unit", "Tax", "Currency", "ElectricityPrice")
electricity <- tbl_df(read.csv("Data/nrg_pc_204_1_Data.csv", header=TRUE, skip=45, col.names=electricity.colnames))
electricity <- electricity[,c(1,2,8)]
gas.colnames <- c("Date", "Country", "Product", "Consom", "Unit", "Tax", "Currency", "GasPrice")
gas <- tbl_df(read.csv("Data/nrg_pc_202_1_Data.csv", header=TRUE, skip=45, col.names=gas.colnames))
gas <- gas[,c(1,2,8)]
merge(electricity, gas)
energy <- tbl_df(merge(electricity, gas))
electricity <- omit.na(electricity)
gas <- omit.na(gas)
gas <- na.omit(gas)
electricity <- na.omit(electricity)
electricity <- na.omit(electricity)
gas <- na.omit(gas)
energy <- tbl_df(merge(electricity, gas))
?na.omit
energy
energy$Date <- as.Date(energy$Date)
energy$Date <- gsub("S1" | "S2", "", paste(energy$Date))
energy$Date <- gsub("S1|S2", "", paste(energy$Date))
energy
unique(energy$Date)
aggregate(energy, by.list(Country, Date), FUN=mean)
aggregate(energy, by=list(Country, Date), FUN=mean)
energy %>% aggregate(by=list(Country, Date), FUN=mean)
energy %>% aggregate(by=list(Country, Date), FUN=mean)
aggregate(energy, by=list(energy$Country, energy$Date), FUN=mean)
?aggregate
aggregate(energy$ElectricityPrice, by=list(energy$Country, energy$Date), FUN=mean)
# define the normalize function
normalize <- function ( x ) {
a <- min ( x , na . rm = TRUE )
b <- max ( x , na . rm = TRUE )
( x - a )/( b - a )
}
# load the longley dataset
data ( longley )
# normalize the dataset
normalized <- data . frame ( lapply ( longley , normalize ))
# list the first 5 rows of the normalized dataset
head ( normalized)
normalize <- function ( x ) {
a <- min ( x , na . rm = TRUE )
b <- max ( x , na . rm = TRUE )
( x - a )/( b - a )
}
normalize <- function(x) {
a <- min(x, na.rm=TRUE)
b <- max(x, na.rm=TRUE)
(x - a)/(b - a)
}
# load the longley dataset
data(longley)
# normalize the dataset
normalized <- data.frame(lapply(longley,normalize))
# list the first 5 rows of the normalized dataset
head(normalized)
head(longley)
# load data
data(longley)
# fit model
fit <- lm(Employed ~., longley)
# summarize the fit
summary(fit)
# make predictions
predictions <- predict(fit, longley)
# summarize accuracy
mse <- mean((longley$Employed - predictions)^2)
print(mse)
shiny::runApp()
shiny::runApp()
library(help = "datasets")
datasets(Nile)
dataset(Nile)
library(datasets)
head(Nile)
?Nile
library(help = "datasets")
?islands
head(islands)
islands
occupationalStatus
?occupationalStatus
?sunspots
snspots
sunspots
head(sunspots)
head(Co2)
head(co2)
?co2
?trees
head(trees)
shiny::runApp()
plot(trees, Girth ~ Volume)
library(ggplot2)
qplot(data=trees, x=Girth, y=Volume)
qplot(data=trees, x=Height, y=Volume)
qplot(data=trees, x=Girth, y=Height)
plot <- qplot(data=trees, x=Girth, y=Height)
plot + geom.smooth()
shiny::runApp()
?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(data=trees, x=input$xcol, y=input$ycol)
plot(data=trees, x=Height, y=volume)
plot(data=trees, x=trees$Height, y=trees$Volume)
?selectInput
shiny::runApp()
shiny::runApp()
?par
shiny::runApp()
qplot(data=trees, x=input$xcol, y=input$ycol)
plot(data=trees, x=trees$Height, y=trees$Volume)
shiny::runApp()
shiny::runApp()
?data.table
install.packages(data.table)
install.packages("data.table")
library(data.table)
shiny::runApp()
shiny::runApp()
shiny::runApp()
qplot(data=trees, x=Volume, y=Height)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ggplot(data=trees, x=trees$Height, y=trees$Volume)
ggplot(data=trees, aes(x=trees$Height, y=trees$Volume))
ggplot(data=trees, aes(x=trees$Height, y=trees$Volume)) + geom.line()
ggplot(data=trees, aes(x=trees$Height, y=trees$Volume)) + geom.smooth()
ggplot(data=trees, aes(x=trees$Height, y=trees$Volume)) + geom.smooth
library(ggplot2)
ggplot(data=trees, aes(x=trees$Height, y=trees$Volume)) + geom.smooth
ggplot(data=trees, aes(x=trees$Height, y=trees$Volume)) + geom_smooth9
ggplot(data=trees, aes(x=trees$Height, y=trees$Volume)) + geom_smooth()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?par
?mar
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?plot
shiny::runApp()
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='edkerrie',
token='7F1C93497056AC3CC0C1342844998ADD',
secret='P8NdsfeXZKBZoQ4MErLlvxUmJqtTmtjH5z8NbbGK')
library(shinyapps)
getwd()
shinyapps::deployApp('')
shiny::runApp()
shiny::runApp()
shiny::runApp()
?trees
?verbatimTextOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
[,1]	Girth,	 numeric,	 Tree diameter in inches
shiny::runApp()
shiny::runApp()
